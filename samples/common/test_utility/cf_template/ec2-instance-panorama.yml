AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instance
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t4g.2xlarge
    AllowedValues:
    - t4g.2xlarge
    - t4g.micro
    - t4g.xlarge
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings: 
  RegionMap: # Ubuntu Server 20.04 LTS (HVM), SSD Volume Type
    us-east-1:
      id: ami-0a75bd84854bc95c9
    us-east-2:
      id: ami-06b74af9fe7907906
    us-west-2:
      id: ami-05f290e7e87696c29
    eu-central-1:
      id: ami-0662ac347458e7d4c
    eu-west-1:
      id: ami-07a436be3d0883136
    ap-northeast-1:
      id: ami-0204c9bcdc2f0250d
    ap-southeast-1:
      id: ami-02cbb518252acafee
    ap-southeast-2:
      id: ami-051dba585c12c8e8b
    ca-central-1:
      id: ami-00b9da4a345757cb4

Resources:
  ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups: [!Ref 'ec2SecurityGroup']
      KeyName: !Ref KeyName
      ImageId: !FindInMap
        - RegionMap
        - !Ref AWS::Region
        - id
      IamInstanceProfile: !Ref ec2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 500
      UserData:
        Fn::Base64: !Sub |
                #!/bin/bash -xe

                HOME=/home/ubuntu
                echo $HOME > $HOME/user_data.txt

                apt -y update && apt -y upgrade
                apt -y install \
                    wget \
                    build-essential \
                    checkinstall \
                    libreadline-gplv2-dev \
                    libncursesw5-dev \
                    libssl-dev \
                    libsqlite3-dev \
                    tk-dev \
                    libgdbm-dev \
                    libc6-dev \
                    libbz2-dev \
                    libffi-dev \
                    zlib1g-dev \
                    python3 \
                    python3-dev \
                    python3-pip \
                    python3-numpy \
                    python3-distutils \
                    python3-testresources \
                    cmake \
                    git \
                    libgtk2.0-dev \
                    pkg-config \
                    libavcodec-dev \
                    libavformat-dev \
                    libswscale-dev \
                    libtbb2 \
                    libtbb-dev \
                    libjpeg-dev \
                    libpng-dev \
                    libtiff-dev \
                    libdc1394-22-dev \
                    protobuf-compiler \
                    libgflags-dev \
                    libgoogle-glog-dev \
                    libblas-dev \
                    libhdf5-serial-dev \
                    liblmdb-dev \
                    libleveldb-dev \
                    liblapack-dev \
                    libsnappy-dev \
                    libprotobuf-dev \
                    libopenblas-dev \
                    libboost-dev \
                    libboost-all-dev \
                    libeigen3-dev \
                    libatlas-base-dev \
                    libne10-10 \
                    libne10-dev \
                    curl \
                    ca-certificates

                echo 'installing jupyterlab'

                pip3 install -U pip setuptools wheel
                pip3 install panoramacli
                pip3 install jupyterlab==4.0.9
                pip3 install boto3
                pip3 install matplotlib
                pip3 install 'attrs==23.1.0' --force-reinstall
                # https://stackoverflow.com/questions/49911550/how-to-upgrade-disutils-package-pyyaml
                pip3 install 'PyYAML==6.0.1' --ignore-installed 
                pip3 install 'sagemaker==2.200.1'
                pip3 install awscli
                pip3 install numpy
                pip3 install opencv-python boto3

                pip3 install neon
                # need to split libneon27-dev and libneon27-gnutls-dev into two lines for some dependency issue.
                apt -y install libneon27-dev 
                apt -y install libneon27-gnutls-dev unzip

                jupyter lab --generate-config

                echo 'cloning sample repository and download video files'
                cd
                sudo su - ubuntu -c "git clone https://github.com/aws-samples/aws-panorama-samples.git"                
                wget https://panorama-starter-kit.s3.amazonaws.com/public/v2/Models/sample-videos.zip
                sudo su - ubuntu -c "unzip sample-videos.zip"
                mv videos/* ./aws-panorama-samples/samples/common/test_utility/videos/
                rmdir videos
                rm sample-videos.zip
                
                mkdir /opt/aws
                mkdir /opt/aws/panorama
                mkdir /opt/aws/panorama/logs
                mkdir /opt/aws/panorama/storage
                
                echo 'installing neo'
                pip3 install dlr==1.10.0
                
                echo 'Install Docker'
                apt install \
                    apt-transport-https \
                    gnupg \
                    lsb-release \
                    docker.io -y
                
                usermod -aG docker ubuntu
                sudo -u ubuntu bash -c 'newgrp docker'
                
                aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 500245141608.dkr.ecr.us-west-2.amazonaws.com
                echo "INSTALLATION COMPLETE" > $HOME/INSTALLATION_COMPLETE.txt
                
  ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: "22"
        ToPort: "22"
      - IpProtocol: "tcp"
        CidrIp: "0.0.0.0/0"
        FromPort: "8888"
        ToPort: "8888"
  ec2Role:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy
      - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
      - arn:aws:iam::aws:policy/IAMFullAccess
      - arn:aws:iam::aws:policy/AWSPanoramaFullAccess
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com",
                  "s3.amazonaws.com",
                  "cloudwatch-crossaccount.amazonaws.com",
                  "cloudformation.amazonaws.com",
                  "member.org.stacksets.cloudformation.amazonaws.com",
                  "sagemaker.amazonaws.com",
                  "rekognition.amazonaws.com",
                  "iam.amazonaws.com",
                  "panorama.amazonaws.com"
                ]
              }
            }
          ]
        }
  ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ec2Role
Outputs:
  publicName:
    Description: Public DNSName of the EC2 instance
    Value: !GetAtt [ec2Instance, PublicDnsName]
  publicIp:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt [ec2Instance, PublicIp]